# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model


class BaseSuccess(Model):
    """NOTE: This class is auto generated by the openapi code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: str = 'success', data: object = None, message: str = None, **kwargs):  # noqa: E501
        """BaseSuccess - a model defined in Openapi

        :param code: The code of this BaseSuccess.  # noqa: E501
        :type code: str
        :param data: The data of this BaseSuccess.  # noqa: E501
        :type data: object
        :param message: The message of this BaseSuccess.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'code': str,
            'data': object,
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'data': 'data',
            'message': 'message'
        }

        # isPrimitiveType: str
        self._code = code
        # isNotPrimitiveType, check for None
        if data is None:
            self._data = data
        # isNotListContainer: object
        elif not isinstance(data, dict):
            self._data = data
        else:
            print('11111')
            data_class = globals()['object']
            self._data = data_class.from_db_dict(data)
            # self._data = data_class(**data)
        # isPrimitiveType: str
        self._message = message
        print(self._data)
    @property
    def code(self) -> str:
        """Gets the code of this BaseSuccess.


        :return: The code of this BaseSuccess.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this BaseSuccess.


        :param code: The code of this BaseSuccess.
        :type code: str
        """

        self._code = code

    @property
    def data(self) -> object:
        """Gets the data of this BaseSuccess.


        :return: The data of this BaseSuccess.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """Sets the data of this BaseSuccess.


        :param data: The data of this BaseSuccess.
        :type data: object
        """

        self._data = data

    @property
    def message(self) -> str:
        """Gets the message of this BaseSuccess.


        :return: The message of this BaseSuccess.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this BaseSuccess.


        :param message: The message of this BaseSuccess.
        :type message: str
        """

        self._message = message
