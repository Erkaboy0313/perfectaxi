# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model



class BaseError(Model):
    """NOTE: This class is auto generated by the openapi code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: str = None, message: str = None, **kwargs):  # noqa: E501
        """BaseError - a model defined in Openapi

        :param code: The code of this BaseError.  # noqa: E501
        :type code: str
        :param message: The message of this BaseError.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'code': str,
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message'
        }

        # isPrimitiveType: str
        self._code = code
        # isPrimitiveType: str
        self._message = message


    # dict compat section
    def get(self, key):
        return getattr(self, key)

    def __getitem__(self, key):
        return self.__dict__['_%s' % key]

    def __setitem__(self, key, value):
        self.__dict__['_%s' % key] = value

    def __delitem__(self, key):
        del self.__dict__['_%s' % key]

    def __contains__(self, key):
        return '_%s' % key in self.__dict__

    def __len__(self):
        return len(self.__dict__)

    def __repr__(self):
        return repr(self.__dict__)

        # /dict compat section

    @property
    def code(self) -> str:
        """Gets the code of this BaseError.


        :return: The code of this BaseError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this BaseError.


        :param code: The code of this BaseError.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self) -> str:
        """Gets the message of this BaseError.


        :return: The message of this BaseError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this BaseError.


        :param message: The message of this BaseError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
